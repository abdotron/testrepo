import re
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.animation as animation
from matplotlib import style
import pdb
def open_file(file):
        f = open(file,"r")
	#skip first line
        f2 =f.readlines()
        f.close
	return f2[1:]

def write_tofile(f2,filename):
        f2length=int(len(f2))
        f = open(filename,"w+")
        for line in range(f2length):
                f.write("%s"%f2[line])
        f.close()

##################################################################data analytics section###################################################
agents_positions="./left and right agents positions .csv"
signs_positions="./signs_positions_latst_test.csv"
signs_list=open_file(signs_positions)
timescale=1
def get_agents(time_stamp,agents_list,signs_list,rangex,rangey,rangez):
	diffx=0
	diffy=1
	diffz=1
	timestampdiff=10
	number_of_agents=600
	signs=[]
#        time_stamps_list=list(dict.fromkeys(time_stamps_list))
# this function returns the agents ids at all signs in a certain time  returned agents[sign_id] regraded that the signs are in csv file with id order in 0,1,2,3,... sample output [['1001', '1002'], ['1064', '1073']] i.e [[ids@sign0], [ids@sign1]]
	i=1
	#debugger
	#pdb.set_trace()
	min_signs=[float(agents_list[0].split(',')[2]),float(agents_list[0].split(',')[3]),float(agents_list[0].split(',')[4])]
	max_signs=[float(agents_list[0].split(',')[2]),float(agents_list[0].split(',')[3]),float(agents_list[0].split(',')[4])]
	for list_index in range(0,len(agents_list)):
		line=agents_list[list_index]		
		#finding the global minimum and maximum
		min_signs[0]=float(line.split(',')[2]) if min_signs[0] > float(line.split(',')[2]) else min_signs[0]
		min_signs[1]=float(line.split(',')[3]) if min_signs[1] > float(line.split(',')[3]) else min_signs[1]
		min_signs[2]=float(line.split(',')[4]) if min_signs[2] > float(line.split(',')[4]) else min_signs[2]
		max_signs[0]=float(line.split(',')[2]) if max_signs[0] < float(line.split(',')[2]) else max_signs[0]
		max_signs[1]=float(line.split(',')[3]) if max_signs[1] < float(line.split(',')[3]) else max_signs[1]
		max_signs[2]=float(line.split(',')[4]) if max_signs[2] < float(line.split(',')[4]) else max_signs[2]
		for i in range(0,len(signs_list)):
	                X=signs_list[i].split(',')[1]
        	        Y=signs_list[i].split(',')[2]
                	Z=signs_list[i].split(',')[3]
			#check put it zero to check all conditions  and append
			if (1):
				if ((float(X)-rangex)<=float(line.split(',')[2])) and (float(line.split(',')[2])<=(float(X)+rangex)) and ((float(Y)-rangey)<=float(line.split(',')[3])) and (float(line.split(',')[3])<=(float(Y)+rangey)) and ((float(Z)-rangez)<=float(line.split(',')[4])) and (float(line.split(',')[4])<=(float(Z)+rangez)):
					signs.append(str(list_index)+","+str(i)+","+line)
			#check only in z put it one to check only in z direction
			if (0):
				if (((float(Z)-rangez)<=float(line.split(',')[4])) and (float(line.split(',')[4])<=(float(Z)+rangez))):
					signs.append(str(list_index)+","+str(i)+","+line)
				
	
	#write_tofile(signs,"signs_scrampled.csv")
	diffx=0
	timestampdiff=10
	number_of_agents=600
	k=1
	directions=[]
	data=[]
	# set 1 for the direction to be taken into consideration x or y or z 
	check_x=0
	check_y=0
	check_z=1
	i=0
	#signs=open_file("./signs_scrampled.csv")
#	data.append(signs[0])
	for i in range(0,len(signs)):
		if (float(signs[i].split(',')[1])!=float(k)):
			#filename="sign_direction"+str(k)
	                #write_tofile(directions,filename)
			#extracting position data to files
			directions=[]
			k=k+1
		j=0
		# search for agent in list with the same id
		for j in range(0,len(signs)):
			# same agent bigger time stamp not te same sign
			if (check_x==1):
				# first next sign (float(signs[j].split(',')[1])==float(signs[i].split(',')[1])+1) and
				if ((signs[j].split(',')[1]!=signs[i].split(',')[1]) and (signs[j].split(',')[3]==signs[i].split(',')[3]) and (float(signs[j].split(',')[2]) > float(signs[i].split(',')[2]))):			
                               #straight condition if the difference in next position is less than diffx
					if (abs(float(signs[i].split(',')[4])-float(signs[j].split(',')[4]))<=diffx):
                                        	data.append("u"+","+signs[i])

					if (float(signs[i].split(',')[4])-float(signs[j].split(',')[4])>=diffx):
						data.append("x"+","+signs[i])
					else:
                        	                data.append("-x"+","+signs[i])
					break
                        if (check_y==1):
                                if ((signs[j].split(',')[1]!=signs[i].split(',')[1]) and (signs[j].split(',')[3]==signs[i].split(',')[3]) and (float(signs[j].split(',')[2]) > float(signs[i].split(',')[2]))):
                               #straight condition if the difference in next position is less than diffx
                                        if (abs(float(signs[i].split(',')[5])-float(signs[j].split(',')[5]))<=diffx):
                                                data.append("u"+","+signs[i])
                                        if (float(signs[i].split(',')[5])-float(signs[j].split(',')[5])>=diffx):
                                                data.append("x"+","+signs[i])
                                        else:
                                                data.append("-x"+","+signs[i])
                                        break
#			pdb.set_trace()
                        if (check_z==1):
                                if ((signs[j].split(',')[1]!=signs[i].split(',')[1]) and (signs[j].split(',')[3]==signs[i].split(',')[3]) and (float(signs[j].split(',')[2]) > float(signs[i].split(',')[2]))):
                               #straight condition if the difference in next position is less than diffx
                                        if (abs(float(signs[i].split(',')[6])-float(signs[j].split(',')[6]))<=diffx):
                                                data.append("u"+","+signs[i])

                                        if (float(signs[i].split(',')[6])-float(signs[j].split(',')[6])>=diffx):
                                                data.append("x"+","+signs[i])
					#	last_displayed[int(signs[i].split(',')[1])]="x"
                                        else:
                                                data.append("-x"+","+signs[i])
					#	last_displayed[int(signs[i].split(',')[1])]="-x"
						
                                        break
			#agent not found again increases ordered_display length 
				else:
					if (j==len(signs)-1):
						#data.append("x"+","+signs[i])
 						index=int(signs[i].split(',')[1])
						#data.append(str(last_displayed[index])+","+signs[i])	
	write_tofile(data,"data_scrampled.csv")
	print min_signs
	print max_signs
	return data
###########################initial display##################33
def get_initial(length,ordered_display):
	#initial	
	last_displayed=[2 for i in range(length)]
	for j in range(0,length):
		for k in range(0,len(ordered_display)):
			if int(ordered_display[k].split(',')[2])==int(j):
                                if (ordered_display[k].split(',')[0]=="x"):
                                	last_displayed[j]=1
					break
                                if (ordered_display[k].split(',')[0]=="-x"):
                                        last_displayed[j]=-1
                                        break
                                if (ordered_display[k].split(',')[0]=="u"):
                                        last_displayed[j]=2
					break
#	print length
	
	return last_displayed

#at the same time stamp some agents are divided among different signs for certain signs
#calling the filteration system
ordered_directions=get_agents("0",open_file(agents_positions),signs_list,1,1,1)
########## check division of 3 elements###################3
def check_division (x,y,z):
	index=["x","u",1]
# this function returns the maximum division of permutations of x,y,z
	divisor=1 #down
	divided=1 #up
	if x>y and x > z:
		divided = x
		index[0]="x"
	elif y>z and y > x:
		divided = y
		index[0]="-x"
	else:
		divided = z
		index[0]="u"
	if x<y: 
		if x<z:
			if x != 0:
				divisor =x
				index[1]="x"
			elif y<z and y !=0:
				divisor =y
				index[1]="-x"
			elif z!=0:
				divisor=z
				index[1]="u"
		elif z<y and z !=0:
			divisor =z
			index[1]="u"
		elif y!=0:
			divisor=y
			index[1]="u"
	elif y<z and y!=0:
		divisor=y
		index[1]="-x"
	elif z!=0:
		divisor=z
		index[1]="u"
	index[2]= (divided/divisor)
	return index #3 5 6 8

###############################elemenating redundant timestamps and summarizing###############33
def agents_average(ordered_display):
	avereged=[]
	#selected_signs the signs that are at the same positions and there is a possibility that the agents at that time will be divided
	selected_signs=[0,2]
	timestamp=-1
	j=0
	for i in range(0,len(ordered_display)):
		if timestamp == ordered_display[i].split(',')[3]:
			continue		
		timestamp=ordered_display[i].split(',')[3]
		countx=0
		countu=0
		count_x=0
		
		for j in range(j,len(ordered_display)):
			if ((timestamp == ordered_display[j].split(',')[3]) and int(ordered_display[j].split(',')[2]) in selected_signs ):
				if (ordered_display[j].split(',')[0]=="x"):
					countx=countx+1
				if (ordered_display[j].split(',')[0]=="-x"):
					count_x=count_x+1
				if (ordered_display[j].split(',')[0]=="u"):
					countu=countu+1
			else:
				break
					
		hi=check_division(countx,count_x,countu)		
	#########################number of agents to total agents 10 sub agents to total agents
		if 20>= hi[2] > 0  :
			if ordered_display[i].split(',')[0]== "-x":
				avereged.append(hi[0]+hi[1]+","+ordered_display[i][3:])
				
			else:
				avereged.append(hi[0]+hi[1]+","+ordered_display[i][2:])
			
		else:
			avereged.append(ordered_display[i])

	write_tofile(avereged,"./data_summarized")
	return avereged

ordered_display=agents_average(ordered_directions)
#ordered_display=open_file("./data_summarized")


#initialize the list which will store old signs positions so i store the previous plotted value
#initial value isn't on timestamp zero as some signs don't get changed until final time stamps
global last_displayed

#initialization of last version of display
last_displayed=get_initial(len(signs_list),ordered_directions)
#print last_displayed

#last_displayed=[8 for i in range(0,len(signs_list))]
a=8
style.use('fivethirtyeight')
fig = plt.figure()
#the signs to skip plotting which will stay the same chosen direction 1 neglect 0 plot
skip_signs=[0,2] #######################################static displays defined here 
##################################################3plotting section##################################################################3####3
#animate the signs to be plotted  the plotted directions according to the direction of the agent
def animate(i):
	right=mpimg.imread('right.png')
	left=mpimg.imread('left.png')
	straight=mpimg.imread('up.png')
	ux=mpimg.imread('ux.png')
	u_x=mpimg.imread('u_x.png')
	minusxu=mpimg.imread('minusxu.png')
	minusxx=mpimg.imread('minusxx.png')
	x_x=mpimg.imread('x_x.png')
	xu=mpimg.imread('xu.png')
	fig.clear()
	number_of_plot=3
	
	#j is counter on the sub plots we have # of subplots = # of signs
	for j in range(0,len(signs_list)):
		sub_plot_index=number_of_plot*100+number_of_plot*10+j+1
                sign_name="Sign ("+str(j+1)+")"
		plt.subplot(sub_plot_index)
		
	#in case it didn't find the direction for the agent plot the previous one
		if ( 1 ): #####################just to display previous displayed value
                	if (last_displayed[j]==1):
                		plt.imshow(right)
                	if (last_displayed[j]==-1):
                		plt.imshow(left)
                	if (last_displayed[j]==2):
                		plt.imshow(straight)
                	if (last_displayed[j]==3):
                		plt.imshow(minusxu)
                	if (last_displayed[j]==4):
                		plt.imshow(xu)
                	if (last_displayed[j]==5):
                		plt.imshow(minusxx)
                	if (last_displayed[j]==6):
                		plt.imshow(x_x)
                	if (last_displayed[j]==7):
                		plt.imshow(u_x)
                	if (last_displayed[j]==8):
                		plt.imshow(ux)
                plt.title(sign_name,fontsize=16)
	        plt.axis('off')
		plt.xticks([])
		plt.yticks([])
		# skip certain signs if you don't want to plot certain signs##############static signs
		if j in skip_signs:
			plt.imshow(straight)
			continue
	#check for each element in the small data for the time stamp = the same plotted time stamp and the sign number and plot it for the current sign	
		for k in range(0,len(ordered_display)):
			if (int(ordered_display[k].split(',')[2])==int(j) and int(ordered_display[k].split(',')[3])==int(i)):
				if (ordered_display[k].split(',')[0]=="x"):
					global last_displayed
					last_displayed[j]=1
					plt.imshow(right)
					#print str(j)+"here"+" "+str(last_displayed[j])
					break
					#zero means no change occured on the position so plot the previous position
				if (ordered_display[k].split(',')[0]=="-x"):
                                        global last_displayed
					last_displayed[j]=-1
					plt.imshow(left)
					break
                                if (ordered_display[k].split(',')[0]=="u"):
					global last_displayed	
					last_displayed[j]=2
					plt.imshow(straight)			
					break
                                if (ordered_display[k].split(',')[0]=="-xu"):
					global last_displayed	
					last_displayed[j]=3
					plt.imshow(minusxu)			
					break
                                if (ordered_display[k].split(',')[0]=="xu"):
					global last_displayed	
					last_displayed[j]=4
					plt.imshow(xu)			
					break
                                if (ordered_display[k].split(',')[0]=="-xx"):
					global last_displayed	
					last_displayed[j]=5
					plt.imshow(minusxx)			
					break				
                                if (ordered_display[k].split(',')[0]=="x-x"):
					global last_displayed	
					last_displayed[j]=6
					plt.imshow(x_x)			
					break	
                                if (ordered_display[k].split(',')[0]=="u-x"):
					global last_displayed	
					last_displayed[j]=7
					plt.imshow(u_x)			
					break
                                if (ordered_display[k].split(',')[0]=="ux"):
					global last_displayed	
					last_displayed[j]=8
					plt.imshow(ux)			
					break
				#if (k==len(ordered_display)-1):
		                #	if (last_displayed[j]==1):
        		        #	       	plt.imshow(right)
	                        #	if (last_displayed[j]==-1):
        	                 #       	plt.imshow(left)
	        	          #      if (last_displayed[j]==2):
        	        	   #             plt.imshow(straight)	

		print i/timescale
		print last_displayed
	return 
ani = animation.FuncAnimation(fig, animate, interval=int(1000/timescale))
plt.show()
	 







